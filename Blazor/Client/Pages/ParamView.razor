@using System.Text.RegularExpressions
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="mb-3">
    <button class="btn btn-link" @onclick="@(()=>SortTable.InvokeAsync(new Dictionary<string,string>{{"sort","message"}}))" type="submit"><span class="oi @(Sort?.SortBy==true?"oi-arrow-top":"oi-arrow-bottom") " aria-hidden="true"></span> Сортировать по алфавиту</button>
    <button class="btn btn-link" @onclick="@(()=>SortTable.InvokeAsync(new Dictionary<string,string>{{"style",(Sort?.Style=="table-dark"?"":"table-dark")}}))" type="submit">Темная таблица</button>
    <NavLink class="btn btn-link" href="savemessage">
        <span class="oi oi-plus" aria-hidden="true"></span> Добавить сообщение
    </NavLink>

    <div class="mb-3">
        <label for="Message" class="col-form-label">Ip сервера</label>
        <input type="text" class="form-control" id="IpServer" @bind="IpServer" />
    </div>
    <button class="btn btn-info" type="button" @onclick="()=>SaveIp()">Сохранить IP</button>

     <div class="mb-3">
        <label for="Message" class="col-form-label">Адрес Базы</label>
        <input type="text" class="form-control" id="IpServer" @bind="IpBase" />
    </div>
    <button class="btn btn-info" type="button" @onclick="()=>SaveBase()">Сохранить</button>
</div>


@code {
    [Parameter]
    public EventCallback<Dictionary<string, string>> SortTable { get; set; }

    [CascadingParameter]
    public Param? Sort { get; set; }

    private string? IpServer{ get; set; }

    private string? IpBase{ get; set; }


    protected override async Task OnInitializedAsync()
    {
        await Http.GetAsync("GetIpServer").ContinueWith(async x => { IpServer = await x.Result.Content.ReadAsStringAsync(); });
        await Http.GetAsync("GetIpBase").ContinueWith(async x => { IpBase = await x.Result.Content.ReadAsStringAsync(); });
    }

    private async Task SaveIp()
    {
        if (Regex.IsMatch(IpServer!, @"^http(s){0,1}://(\w)*:(\d){4}$"))
        {
            await Http.GetAsync("SaveIpServer/?ip=" + IpServer);
            NavigationManager.NavigateTo("/");
        }
        else
            IpServer = "Введен не корректный адрес!";
    }

    private async Task SaveBase()
    {
        await Http.PostAsJsonAsync<IpBase>("SaveIpBase", new IpBase { Ip = IpBase! });
        NavigationManager.NavigateTo("/");

    }

}
